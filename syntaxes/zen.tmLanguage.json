{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "zen",
  "scopeName": "source.zen",
  "fileTypes": [
    "zen"
  ],
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#support"
    },
    {
      "include": "#variables"
    }
  ],
  "repository": {
    "variables": {
      "patterns": [
        {
          "name": "meta.function.declaration.zen",
          "patterns": [
            {
              "comment": "normal function",
              "match": "\\b(fn)\\s+([_]*[a-z]+[_a-zA-Z0-9]*)",
              "captures": {
                "1": {
                  "name": "storage.type.function.zen"
                },
                "2": {
                  "name": "entity.name.function.zen"
                }
              }
            },
            {
              "comment": "function returns a type",
              "match": "\\b(fn)\\s+([A-Z][a-zA-Z0-9]*)",
              "captures": {
                "1": {
                  "name": "storage.type.function.zen"
                },
                "2": {
                  "name": "entity.name.type.zen"
                }
              }
            }
          ]
        },
        {
          "name": "meta.function.call.zen",
          "patterns": [
            {
              "match": "([_]*[a-z]+[_a-zA-Z0-9]*)(?=\\s*\\()",
              "name": "entity.name.function.zen"
            },
            {
              "match": "([A-Z][a-zA-Z0-9]*)(?=\\s*\\()",
              "name": "entity.name.type.zen"
            }
          ]
        },
        {
          "name": "meta.type.declaration.zen",
          "patterns": [
            {
              "comment": "struct declaration",
              "match": "\\b(const)\\s+([A-Z][_a-zA-Z0-9]*)",
              "captures": {
                "1": {
                  "name": "keyword.default.zen"
                },
                "2": {
                  "name": "entity.name.type.zen"
                }
              }
            }
          ]
        },
        {
          "name": "keyword.default.zen",
          "match": "\\b(fn|const|var)\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.storage.zen",
          "match": "\\b(extern|packed|export|pub|noalias|inline|noinline|comptime|volatile|align|linksection|callconv|threadlocal|allowzero|vtable|anyframe|deprecated)\\b"
        },
        {
          "name": "keyword.structure.zen",
          "match": "\\b(struct|enum|union|interface)\\b"
        },
        {
          "name": "keyword.statement.zen",
          "match": "\\b(asm|unreachable|try|catch)\\b"
        },
        {
          "name": "keyword.control.flow.zen",
          "match": "\\b(break|return|continue|if|else|switch|and|or|orelse|async|noasync|await|suspend|resume|cancel|defer|errdefer)\\b"
        },
        {
          "name": "keyword.control.repeat.zen",
          "match": "\\b(while|for)\\b"
        },
        {
          "name": "keyword.constant.default.zen",
          "match": "\\b(null|undefined)\\b"
        },
        {
          "name": "keyword.constant.bool.zen",
          "match": "\\b(true|false)\\b"
        },
        {
          "name": "keyword.default.zen",
          "match": "\\b(usingnamespace|test)\\b"
        },
        {
          "name": "keyword.type.zen",
          "match": "\\b(bool|void|noreturn|type|anytype|error|anyerror|promise)\\b"
        },
        {
          "name": "keyword.type.integer.zen",
          "match": "\\b(f16|f32|f64|f128|u\\d+|i\\d+|isize|usize|comptime_int|comptime_float)\\b"
        },
        {
          "name": "keyword.type.c.zen",
          "match": "\\b(c_short|c_ushort|c_int|c_uint|c_long|c_ulong|c_longlong|c_ulonglong|c_longdouble|c_void)\\b"
        },
        {
          "name": "keyword.todo.zen",
          "match": "\\b(TODO,XXX)\\b"
        }
      ]
    },
    "operators": {
      "patterns":[
        {
          "name": "keyword.operator.comparison.zen",
          "match": "(\\b(and|or)\\b)|(==|!=)"
        },
        {
          "name": "keyword.operator.arithmetic.zen",
          "match": "(-%?|\\+%?|\\*%?|/|%)=?"
        },
        {
          "name": "keyword.operator.bitwise.zen",
          "match": "(<<%?|>>|!|&|\\^|\\|)=?"
        },
        {
          "name": "keyword.operator.special.zen",
          "match": "(==|\\+\\+|\\*\\*|->)"
        }
      ]
    },
    "comments": {
      "patterns":[
        {
          "name": "comment.line.documentation.zen",
          "begin": "//[!/](?=[^/])",
          "end": "$"
        },
        {
          "name": "comment.line.double-slash.zen",
          "begin": "//",
          "end": "$"
        }
      ]
    },
    "strings": {
      "patterns":[
        {
          "name": "string.quoted.double.zen",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "include": "#stringcontent"
            }
          ]
        },
        {
          "name": "string.multiline.zen",
          "begin": "\\\\\\\\",
          "end": "$"
        },
        {
          "name": "string.quoted.single.zen",
          "match": "'([^'\\\\]|\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.))'"
        }
      ]
    },
    "stringcontent": {
      "patterns": [
        {
          "name": "constant.character.escape.zen",
          "match": "\\\\([nrt'\"\\\\]|(x[0-9a-fA-F]{2})|(u\\{[0-9a-fA-F]+\\}))"
        },
        {
          "name": "invalid.illegal.unrecognized-string-escape.zen",
          "match": "\\\\."

        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.zen",
          "match": "\\b[0-9][0-9_]*(\\.[0-9][0-9_]*)?[eE][+-]?[0-9_]+(f32|f64)?\\b"
        },
        {
          "name": "constant.numeric.float.zen",
          "match": "\\b[0-9][0-9_]*(\\.[0-9][0-9_]*)?([eE][+-]?[0-9_]+)?(f32|f64)\\b"
        },
        {
          "name": "constant.numeric.decimal.zen",
          "match": "\\b[0-9][0-9_]*([ui](8|16|32|64|128|s|size))?\\b"
        },
        {
          "name": "constant.numeric.hexadecimal.zen",
          "match": "\\b0x[a-fA-F0-9_]+([ui](8|16|32|64|128|s|size))?\\b"
        },
        {
          "name": "constant.numeric.octal.zen",
          "match": "\\b0o[0-7_]+([ui](8|16|32|64|128|s|size))?\\b"
        },
        {
          "name": "constant.numeric.binary.zen",
          "match": "\\b0b[01_]+([ui](8|16|32|64|128|s|size))?\\b"
        }
      ]
    },
    "support": {
      "patterns": [
        {
          "comment": "Built-in functions",
          "name": "support.function.builtin.zen",
          "match": "@[_a-zA-Z][_a-zA-Z0-9]*"
        }
      ]
    }
  }
}
